{"version":3,"sources":["assets/williams.jpg","assets/train.jpg","assets/submarine.jpg","components/HomeCarousel.js","Home.js","Sales.js","About.js","Contact.js","NoMatch.js","components/Layout.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Styles","styled","div","HomeCarousel","Carousel","fluid","className","controls","indicators","interval","fade","CarouselItem","src","slide01","alt","slide02","slide03","Home","Sales","About","Contact","NoMatch","Layout","props","Container","Row","Col","md","span","offset","children","NavigationBar","Navbar","expand","Brand","href","Toggle","area-controls","Collapse","id","Nav","Item","Link","App","Fragment","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,4YCQ3C,IAAMC,EAASC,IAAOC,IAAV,KAMCC,EAAe,kBACxB,kBAACH,EAAD,KACI,kBAACI,EAAA,EAAD,CAAUC,OAAK,EAACC,UAAU,YAAYC,UAAU,EAAOC,YAAY,EAAOC,SAAU,IAAMC,MAAI,GAC1F,kBAACC,EAAA,EAAD,KACI,yBAAKL,UAAU,gBAAgBM,IAAKC,IAASC,IAAI,uBAErD,kBAACH,EAAA,EAAD,KACI,yBAAKL,UAAU,gBAAgBM,IAAKG,IAASD,IAAI,oBAErD,kBAACH,EAAA,EAAD,KACI,yBAAKL,UAAU,gBAAgBM,IAAKI,IAASF,IAAI,2BCtBpDG,EAAO,kBAChB,6BACI,kBAAC,EAAD,MACA,wIACA,iGAAsE,6BAAtE,kCCJKC,EAAQ,kBACjB,6BACI,oDACA,sHCHKC,EAAQ,kBACjB,6BACI,wCACA,qDACA,+eCJKC,EAAU,kBACnB,6BACI,0CACA,8FCHKC,EAAU,kBACnB,6BACI,6C,wBCCKC,EAAS,SAACC,GAAD,OAClB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAAMN,EAAMO,SAAxC,Q,wRCJR,IAAM9B,EAASC,IAAOC,IAAV,KAcC6B,EAAgB,kBACzB,kBAAC,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,OAAO,MACX,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,KAAnB,aACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKlC,UAAU,WACX,kBAACkC,EAAA,EAAIC,KAAL,KAAU,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,KAAf,SACV,kBAACK,EAAA,EAAIC,KAAL,KAAU,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,UAAf,UACV,kBAACK,EAAA,EAAIC,KAAL,KAAU,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,UAAf,UACV,kBAACK,EAAA,EAAIC,KAAL,KAAU,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,YAAf,iBCCfQ,MAnBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IACjC,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,SAASC,UAAW7B,IACtC,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,SAASC,UAAW5B,IACtC,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,WAAWC,UAAW3B,IACxC,kBAAC,IAAD,CAAO2B,UAAW1B,SCTV2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.477de66a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/williams.d585ecb3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/train.a3d905d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/submarine.ee87f75c.jpg\";","import React from 'react';\nimport { Carousel, CarouselItem } from 'react-bootstrap';\nimport styled from 'styled-components';\n\nimport slide01 from '../assets/williams.jpg';\nimport slide02 from '../assets/train.jpg';\nimport slide03 from '../assets/submarine.jpg';\n\nconst Styles = styled.div`\n    .right.carousel-control, .left.carousel-control {\n        display: none;\n    }\n`;\n\nexport const HomeCarousel = () => (\n    <Styles>\n        <Carousel fluid className=\"mb-5 mt-5\" controls={false} indicators={false} interval={4000} fade>\n            <CarouselItem>\n                <img className=\"d-block w-100\" src={slide01} alt=\"Slide 1: williams\" />\n            </CarouselItem>\n            <CarouselItem>\n                <img className=\"d-block w-100\" src={slide02} alt=\"Slide 1: train\" />\n            </CarouselItem>\n            <CarouselItem>\n                <img className=\"d-block w-100\" src={slide03} alt=\"Slide 1: submarine\" />\n            </CarouselItem>\n        </Carousel>\n    </Styles>\n)","import React from 'react';\nimport { HomeCarousel } from './components/HomeCarousel';\nexport const Home = () => (\n    <div>\n        <HomeCarousel />\n        <p>We are MicroGate®, designing and manufacturing specialized serial communications solutions since 1982.</p>\n        <h2>Direct support from experienced hardware and software engineers - <br/>\n            \"Customer Driven, by Design\"</h2>\n    </div>\n)","import React from 'react'\n\nexport const Sales = () => (\n    <div>\n        <h2>Ordering Information</h2>\n        <p>To place an order or to obtain information on a MicroGate product, please contact us.</p>\n    </div>\n)","import React from 'react'\n\nexport const About = () => (\n    <div>\n        <h2>About Us</h2>\n        <p>Invaluable Experience.</p>\n        <p>Established in 1982, MicroGate is an Austin, Texas based company that designs, manufactures and markets a complete line of specialized communications solutions for PC workstations, servers, laptops and embedded environments. MicroGate's SyncLink line includes USB, multiport PCI adapters, and PCI Express cards for WAN, HDLC / SDLC, and other asynchronous / synchronous protocols. MicroGate’s Serial API development kit supports all these adapters directly.</p>\n    </div>\n)","import React from 'react'\n\nexport const Contact = () => (\n    <div>\n        <h2>Contact Us</h2>\n        <p>Contact info\n        13284 Pond Springs Rd, #102\n        Austin, TX 78729\n        USA</p>\n    </div>\n)","import React from 'react'\n\nexport const NoMatch = () => (\n    <div>\n        <h2>NoMatch 404</h2>\n    </div>\n)","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\n\nexport const Layout = (props) => (\n    <Container>\n        <Row>\n        <Col md={{ span: 8, offset: 2 }}>{props.children} </Col>\n        </Row>\n    </Container>\n) ","import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport styled from 'styled-components';\n\nconst Styles = styled.div`\n    .navbar {\n        background-color: #222;\n    }\n    \n    .navbar-brand, .navbar-nav .nav-link {\n        color: #bbb;\n\n        &:hover {\n            color: white;\n        }\n    }\n`;\n\nexport const NavigationBar = () => (\n    <Styles>\n        <Navbar expand=\"lg\">\n            <Navbar.Brand href=\"/\">MicroGate</Navbar.Brand>\n            <Navbar.Toggle area-controls=\"basic-navbar-nav\"/>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"ml-auto\">\n                    <Nav.Item><Nav.Link href=\"/\">Home</Nav.Link></Nav.Item>\n                    <Nav.Item><Nav.Link href=\"/sales\">Sales</Nav.Link></Nav.Item>\n                    <Nav.Item><Nav.Link href=\"/about\">About</Nav.Link></Nav.Item>\n                    <Nav.Item><Nav.Link href=\"/contact\">Contact</Nav.Link></Nav.Item>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    </Styles>\n)","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Home } from './Home';\nimport { Sales } from './Sales';\nimport { About } from './About';\nimport { Contact } from './Contact';\nimport { NoMatch } from './NoMatch';\nimport { Layout } from './components/Layout';\nimport { NavigationBar } from './components/NavigationBar';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavigationBar />\n      <Layout>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/sales\" component={Sales} />\n            <Route exact path=\"/about\" component={About} />\n            <Route exact path=\"/contact\" component={Contact} />\n            <Route component={NoMatch} />\n          </Switch>\n        </Router>\n      </Layout>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}